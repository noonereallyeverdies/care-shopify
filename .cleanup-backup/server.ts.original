// Virtual entry point for the app
import * as remixBuild from 'virtual:remix/server-build';
import {storefrontRedirect} from '@shopify/hydrogen';
import {createRequestHandler} from '@shopify/remix-oxygen';
import {createAppLoadContext} from '~/lib/context';

/**
 * Export a fetch handler in module format.
 */
export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {
    try {
      console.log('[SERVER] Request received:', request.url);
      
      const appLoadContext = await createAppLoadContext(
        request,
        env,
        executionContext,
      );

      /**
       * Create a Remix request handler and pass
       * Hydrogen's Storefront client to the loader context.
       */
      const handleRequest = createRequestHandler({
        build: remixBuild,
        mode: process.env.NODE_ENV,
        getLoadContext: () => appLoadContext,
      });

      console.log('[SERVER] Handling request with Remix...');
      const response = await handleRequest(request);
      console.log('[SERVER] Response status:', response.status);

      if (appLoadContext.session.isPending) {
        response.headers.set(
          'Set-Cookie',
          await appLoadContext.session.commit(),
        );
      }

      if (response.status === 404) {
        /**
         * Check for redirects only when there's a 404 from the app.
         * If the redirect doesn't exist, then `storefrontRedirect`
         * will pass through the 404 response.
         */
        console.log('[SERVER] 404 response, checking for redirects...');
        return storefrontRedirect({
          request,
          response,
          storefront: appLoadContext.storefront,
        });
      }

      return response;
    } catch (error) {
      console.error('[SERVER] Uncaught error:', error);
      
      // Provide specific error page for Shopify configuration issues
      if (error instanceof Error && 
          (error.message.includes('Missing required') || 
           error.message.includes('storefront') || 
           error.message.includes('Shopify') ||
           error.message.includes('context'))) {
        return new Response(
          `<!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Shopify Configuration Error</title>
            <style>
              body { font-family: system-ui, sans-serif; padding: 2rem; line-height: 1.5; }
              .error-box { max-width: 800px; margin: 0 auto; padding: 2rem; border: 1px solid #e0e0e0; border-radius: 8px; }
              h1 { color: #D82C0D; }
              pre { background: #f5f5f5; padding: 1rem; overflow-x: auto; border-radius: 4px; }
              .tip { background: #EAF5FE; padding: 1rem; border-left: 4px solid #428BCA; margin: 1rem 0; }
            </style>
          </head>
          <body>
            <div class="error-box">
              <h1>Shopify Storefront Configuration Error</h1>
              <p>Your application couldn't connect to the Shopify storefront. Please check your environment variables.</p>
              
              <h2>Error Details</h2>
              <pre>${error.message}</pre>
              
              <div class="tip">
                <strong>Tip:</strong> Check that your .env file has the correct values for:
                <ul>
                  <li>PUBLIC_STORE_DOMAIN</li>
                  <li>PUBLIC_STOREFRONT_API_TOKEN</li>
                  <li>PRIVATE_STOREFRONT_API_TOKEN</li>
                  <li>PUBLIC_STOREFRONT_ID</li>
                </ul>
                <p>After updating the .env file, restart your development server.</p>
              </div>
            </div>
          </body>
          </html>`,
          {
            status: 500,
            headers: { 'Content-Type': 'text/html' },
          }
        );
      }
      
      return new Response('An unexpected error occurred', {status: 500});
    }
  },
};
